<!DOCTYPE html><html><head><title>X3_debug_code</title><meta http-equiv="content-type" content="text/html; charset=UTF-8" /><link rel="stylesheet" type="text/css" media="screen" href="../lib/doc.css"/></head><body><article><p>dump_stack:</p><p>	enter 0,0</p><p>	pusha</p><p>	pushf</p><p>	lea rax, <rbp+20]></rbp+20]></p><p>	push rax ; original ESP</p><p>	push qword <rbp]>; original EBP</rbp]></p><p>	push	qword <rbp+16]>; # of dump</rbp+16]></p><p>	push	qword stack_format</p><p>	call	printf</p><p>	add	rsp, 16</p><p>	mov	rbx, <rbp]>	; ebx = original ebp</rbp]></p><p>	mov	rax, <rbp+32]>; eax = # dwords above ebp</rbp+32]></p><p>	shl	rax, 2 ; eax <=/>4</p><p>	add	rbx, rax	; ebx = & highest dword in stack to display</p><p>	mov	rdx, <rbp+32]></rbp+32]></p><p>	mov	rcx, rdx</p><p>	add	rcx, <rbp+24]></rbp+24]></p><p>	inc	rcx		; ecx = # of dwords to display</p><p>stack_line_loop:</p><p>	 push	rdx</p><p>	 ;mov	rdx</p><p>	 push	rcx		; save ecx & edx</p><p>	 ;mov	rcx		; save ecx & edx</p><p>	 push qword <rbx]>	; value on stack</rbx]></p><p>	 push rbx		; address of value on stack</p><p>	 mov	rax, rdx</p><p>	 sal	rax, 4		; eax = 4<edx/></p><p>	 ; push	rax		; offset from ebp</p><p>	 mov rsi, rax		; offset from ebp</p><p>	 ;push qword stack_line_format</p><p>mov rdi, qword stack_line_format</p><p>	 ;call printf</p><p>	 add	rsp, 32</p><p>	 pop	rcx</p><p>	 pop	rdx</p><p>	 sub	rbx, 8</p><p>	 dec	rdx</p><p>	 loop	stack_line_loop</p><p>	; popf</p><p>	; popa</p><p>popAll</p><p>	leave</p><p>	ret</p><p>; what for?</p><p>; was for clearing after printf, now irrelevant</p><p>	; add rsp, 32</p><p>; rbx = & highest qword in stack to display</p><p>	mov	rbx, <rbp]></rbp]></p><p>; (rax = n qwords above ebp)</p><p>; (old base pointer)</p><p>mov rax, <rbp+32]></rbp+32]></p><p>; eax <=/>8</p><p>	shl	rax, 3</p><p>	add rbx, rax</p><p>println64 rbx</p><p>	; rdx = address of qwords to display</p><p>; (old base pointer)</p><p>mov rdx, <rbp+32]></rbp+32]></p><p>	; rcx = count of qwords to display</p><p>	mov	rcx, rdx</p><p>; (old rsi)</p><p>	add	rcx, <rbp+24]></rbp+24]></p><p>; mov rcx, 1</p><p>	inc	rcx	</p><p>println64 rdx</p><p>println64 rcx</p><p>stack_line_loop:</p><p>	 ; push rsi</p><p>	 push rcx</p><p>	 push rdx</p><p>	 push rdi</p><p>; value on stack</p><p>	 ; push qword <rbx]></rbx]></p><p>	 mov rcx, <rbx]></rbx]></p><p>; address of value on stack</p><p>	 ; push rbx		</p><p>	 mov rdx, rbx</p><p>; offset from ebp</p><p>		; eax = 4<edx/></p><p>	 ;sal	rax, 4</p><p>	 ; push	rax</p><p>	 mov rsi, rax</p><p>		</p><p>	 ;push qword stack_line_format</p><p>mov rdi, qword stack_line_format</p><p>	 ;call printf</p><p>	 ;add	rsp, 32</p><p>	 pop rdi</p><p>	 pop	rdx</p><p>	 pop	rcx</p><p>	 ;pop rsi</p><p>	 sub	rbx, 8</p><p>	 dec	rdx</p><p>; Decrements rcx != 0</p><p>	 loop stack_line_loop</p></article></body></html>