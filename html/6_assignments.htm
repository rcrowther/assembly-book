<!DOCTYPE html><html><head><title>6_assignments</title><meta http-equiv="content-type" content="text/html; charset=UTF-8" /><link rel="stylesheet" type="text/css" media="screen" href="../lib/doc.css"/></head><body><article><p>// addresses and constants sction…</p><h1>5 Assignments</h1><p>Now we have a basic rig, we start on arithmetic… Well, that’s what most assembly tutorials seem to do. But we are not everybody else, so we start on how to create basic data—variables and constants,</p><h2>db—space allocation</h2><p>Remember this, from the rig (that I said you can take on trust),</p><pre><code>SECTION .data
    printTest: db 'Aye', 0h
    printlnFmt: db "%s", 10, 0</code></pre><p>Ignore the fact they are strings, Lets go for basics.</p><p>‘db’ introduces data. If that is what it does, it is introducing data into the section of an ELF file which we have said contains ‘initiated data’</p><p>There are several instructions in the ‘db’ family. The instructions stand for,</p><blockquote><p>‘data’<a one letter code for the size></p></blockquote><p>So,</p><dd><dd>db</dd><dt>data byte (8‐bit)</dt><dd>dw</dd><dt>data word (16‐bit)</dt><dd>dd</dd><dt>data double (32‐bit)</dt><dd>dq</dd><dt>data quad (64‐bit)</dt><dd>dt</dd><dd>ddq</dd><dt>data double quad (128‐bit)</dt><dd>do</dd><dt>alias for double‐quad (128‐bit)</dt></dd><h3>Sizing</h3><p>So what are these funny size marks?</p><p>Once upon a time there was a ‘byte’. Computers used it. Then the byte had to get longer. Meanwhile, there was a ‘word’, which was the ‘natural’ bus size of a computer. But then Microsoft decided this was getting silly and confusing, so they set ‘word’ to 16‐bits. Microsoft were not alone, dealing with strings, C decided smallest adressable size (usually 8‐bit) would be a ‘char’, and threw in ‘t_size’. Java made a effort to straighten this out, finalizing a system which is not compatible with anyone else.</p><p>In NASM,</p><dd><dd>BYTE</dd><dt>8‐bit</dt><dd>WORD</dd><dt>(following Microsoft fix) 16‐bit</dt><dd>DWORD</dd><dt>double natural size, 32‐bit</dt><dd>QWORD</dd><dt>quad natural size, 64‐bit</dt></dd><p>and C types?</p><dd><dd>char</dd><dt>(%c) smallest size, usually 8‐bit</dt><dd>int</dd><dt>(%i or %d) at least 16‐bit</dt><dd>long</dd><dt>(%li) at least 32‐bit</dt><dd>long long</dd><dt>(%lli) quad natural size, 64‐bit</dt><dd>float</dd><dt>(%f) Not core spec, usually 32 bits</dt><dd>double</dd><dt>(%f yes, same as float) Not core spec, usually 64 bits</dt></dd><p>What a mess.</p><p>Ok so we carefully match types, then try this code (try it…),</p><pre><code>SECTION .data
    …
    a: db 97
    b: dd 56789
    c: dq 56789
    d: dd 5.6789
    e: dq 5.6789

main:
    …
    printlnChar 'a'
    printlnChar a
    printlnChar 'b'
    println32 b
    printlnChar 'c'
    println64 c
    printlnChar 'd'
    printlnFloat d
    printlnChar 'e'
    printlnFloat e
    …</code></pre><p>The ‘printf’‐based instructions are robust, and will print out. However, we have a problem, because the numbers print out wrong—not what was defined. Your results may even vary, but for sure they are garbage. I get this,</p><pre class="result"><code>a
�
b
6295684
c
6295688
d
7.290232e-304
e
7.290232e-304
</code></pre><p>If you are in 32‐bit, the result may look better. But this is going wrong, and can go wrong, in several places. If you write as above, you are assuming there is some idea of type being passeed about. That the original definition is typed, the load into the register is typed, and the printf knows what it is doing.</p><p>But in assembly language, type only exist to define an immediate size. For example, we defined variable ‘d’ as a 32‐bit. With assembly‐language precision it may have been stored as 32‐bit. Then the value was loaded into a register—in our example, a 64‐bit register. So either the top end of the register was unused (thus carrying garbage), or an oversize lump was carved from memory to fill it (with extra garbage). We are using macros, so at least we know the register is being loaded for the ‘printf’ call—but what if we had been using a function call? Then the value would have travelled to the stack, maybe with it’s own conventions for data size. And then the register was passed in the C call—unknown C code where we hope the compiler understands our intentions. Quite a few places to go wrong.</p><p>Let’s fix it. First, in 64‐bit especially, we need to talk addresses (pointers).</p><h2>Addresses and constants</h2><p>NASM documentation makes a play that NASM handling of addresses is a simple system compared to TASM and MASM. YASM documentation (based in NASM with often useful additions) talks about ‘Effective addresses’. Personally, I find the descriptions, while historically vital, confused. Are they talking about addresses (references), or getting contents (de‐referencing)? The descriptions further seem contradictory—is an ‘memory address’ getting an address or contents?</p><p>Far as I can tell the situation is this:</p><p>The NASM (and YASM) syntax for symbols always produces symbols. That means a compiler contruct which allows us to refer to something. The something can be an address or a constant (from the compiler documentation, this was not the case in MASM and TASM. Symbols in some constructions referred to actual references, etc.).</p><p>The ‘d(x)’ class of instructions allocate a piece of memory. Writable or not, the result is an address and a piece of memory (contents).</p><pre><code>limit: dq 32</code></pre><p>NASM has a separate statement for a piece of memory without an address,</p><pre><code>limitConst equ 32</code></pre><p>(of course, this is data at an address. However, the address is obscured, usable only through the symbol, which returns the data)</p><p>Similar to C array notation, a symbol with no brackets means an address, a symbol with square brackets means an access.</p><p>Thus,</p><pre><code>limit           ; gets the address of limit ()
[limit]         ; gets the contents of the 'limit' address
limitConst      : gets the limitConst
[limitConst]    ; treats limitConst as an address, returning ''Segmentation fault'</code></pre><h2>Relative addressing</h2><p>Unwriiten in documentation</p><p>Addresses are measured in bytes. Larger size numerics are held in a consecutive set of bytes. A quadword (64‐bit) is madde of eight bytes. reading them from left to right, as a human would on paper, looks in memory like this,</p><p>byte1</p><p>byte2</p><p>byte3</p><p>byte4</p><p>byte5</p><p>byte6</p><p>byte7</p><p>byte8</p><p>Intel documentation.</p><blockquote><p>The low byte (bits 0 through 7) of each data type occupies the lowest address in memory and that address is also the address of the operand.</p></blockquote><p>Where the adress is is not so important. What you need to know is that the next quadword after a quadword at address ‘addr’ is at ‘addr+8’.</p><p>Because adding these multiples is tedious and error‐prone, the multiplication is often written out expicitly. Sor the fifth wadqord up form address ‘addr’ is ‘addr+5<8’/>Written like this, the next quadword would be ‘addr+1<8’/>(the same as ‘addr+8’).</p><h2>Fix the assiugnments</h2><p>First, we have no chance with floats. For now, drop them both.</p><p>Now, in 64‐bit, all storage sizes should be 64‐bit, ‘dq’.</p><p>Then, first way, access/de‐reference the reference values,</p><pre><code>SECTION .data
    …
    a: dq 97
    b: dq 56789
    c: dq 56789
 
main:
    …
    printlnChar 'a'
    printlnChar [a]
    printlnChar 'b'
    println64 [b]
    printlnChar 'c'
    …</code></pre><p>or, second way, use ‘equ’ and let the compiler work magic,</p><pre><code>SECTION .data
    …
    a: equ 97
    b: equ 56789
    c: equ 56789
 
main:
    …
    printlnChar 'a'
    printlnChar a
    printlnChar 'b'
    println64 b
    printlnChar 'c'
    …</code></pre><p>Either way, that’s better,</p><pre class="result"><code>a
a
b
56789
c
56789</code></pre><p>Try a complete 32 bit pipeline, and you will get this error,</p><pre class="result"><code>hw.asm:xxx: error: mismatch in operand sizes</code></pre><p>The ‘printf’ call baulks. See down a bit.</p><h2>Sections</h2><p>Remember this, from post 2?</p><dd><dd>SECTION .text</dd><dt>contains the instructions that is executed. The only section that can be</dt><p>executed. Treated as read‐only data once the program is run.</p><dd>SECTION .data</dd><dt>contains initialised data. It cannot be executed, but may be read from</dt><p>and written to when the program is run. Contains ‘dx’ type pseudo‐instructions.</p><dd>SECTION .bss</dd><dt>contains uninitialised data. It cannot be executed, but may be read from</dt><p>and written to when the program is run. Contains ‘resx’ pseudo‐instructions.</p><dd>SECTION .rodata</dd><dt>contains initialised read‐only data. It may not be written to. Contains ‘dx’ type pseudo‐instructions.</dt></dd><p>If we are stupid, here is what happens,</p><pre><code>BITS 64
SECTION .rodata
    roa: dq 97
    rob: equ 97
    ; "warning: uninitialized space declared in non-BSS section `.rodata': zeroing"
    ;roc: resq 1

SECTION .data
    ia: dq 97
    ib: equ 97
    ; "warning: uninitialized space declared in non-BSS section `.data': zeroing"
    ; ic: resq 1

SECTION .bss
    ; "warning: attempt to initialize memory in BSS section `.bss': ignored"
    ; da: dq 97
    db: equ 97
    dc: resq 1

SECTION .text
global main
main:
    push rbp

    println64 [ia]
    println64 ib
    println64 [roa]
    println64 rob
    println64 db
    ; prints uninitialized crap
    println64 dc

    ; this works...
    mov rax, [qword ia] 
    mov [dc], rax 
    print64 [dc]

    ; attempt to assign to otherwise similar read-only var
    ; returns "Segmentation fault"
    mov rax, [qword ia] 
    ; mov [roa], rax
    ; print64 [roa]

    pop rbp
    mov rax,0
    ret</code></pre><p>Uninitialised space in sections where data must be initialized is initialized to zero. The attempt to create initialized memory in ‘.bss’ is ignored.</p><p>There is a purpose for the read‐only initialized data—it can carry any large structure which is read‐only (as address/pointer). Though, in the loose world of assembly language, this is unusually fine coding.</p><h2>Macros</h2><p>This notation for bit‐size drives me fly‐crazy,</p><pre><code>; Size-labeled data definitions
%define const equ
%define ref8 db
%define ref16 dw
%define ref32 dd
%define ref64 dq
%define ref128 ddq</code></pre><p>//////////////////</p><p>When size not defined well,</p><pre><code>hw.asm:283: error: operation size not specified</code></pre><h3>Memory references</h3><p>A label refers to a memory reference. NASM uses square brackets to access a label. Unlike other compilers, this syntax is consistently applied.</p><p>mov ax,<wordvar]></wordvar]></p><p>Memory adresses can be relative,</p><p>mov ax,<wordvar+8]></wordvar+8]></p><p>Memory adresses can address more than one register,</p><p>mov ax,<bp+di+8]></bp+di+8]></p><p>In NASM Documentation, see,</p><p>2.2.2 NASM Requires Square Brackets For Memory References</p><p>and</p><p>3.3 Effective Addresses</p><p>We’ll talk more about memory, and data assignments and retrieval, later.</p><blockquote><p>Almost any x87 floating‐point instruction that references memory must use one of the prefixes DWORD, QWORD or TWORD to indicate what size of memory operand it refers to.</p></blockquote><p>BYTE, WORD, DWORD and NOSPLIT.</p></article></body></html>