<!DOCTYPE html><html><head><title>2_documentation</title><meta http-equiv="content-type" content="text/html; charset=UTF-8" /><link rel="stylesheet" type="text/css" media="screen" href="../lib/doc.css"/></head><body><article><h1>2 Documentation</h1><p>Traditionally, references are placed at the back of written material. Academically, that’s organised, but who goes there, especially on the web? So odd is the nature of available assembly language documentation that I’m going to break 500 years of printing practice, and put the references where you can find them—here, at the front.</p><h2>Available documentation on Assembly Code</h2><p>There is no one place, on the web, to learn machine code. There is no place that even gives substantial material. Perhaps books are available, but I wouldn’t know or be able to afford that.</p><p>Scattered through this text are a lot of references to documentation. This situation is so odd, it deserves a short guide.</p><p>Publicly‐available tutorials seem to be copied from one original source, and don’t deserve the name ‘tutorial’. They amount to writing ”Hello World” (this is repeated on Wikipedia, save yourself some trouble, find it there). This is not enough for either knowledge building or assessment. The other main source of help is various notes made for University courses. Unfortunately, these seem to be focused on making their students better high‐level coders—copious notes on numeric theory and boolean logic, but not how to code a loop. This is not much help.</p><p>First, there is Wikipedia. This is no good for the language itself, amounting to a ‘Hello World’ program. However, Wikipedia has a lot of what seem to be old Open Source materials organised and uploaded. This material can be sketchy at times, but is at least wide‐ranging. And Wikipedia is the best referenced and most searchable source on the web. If you need to know what ‘sign extension’ is, Wikipedia can help.</p><p>After that, there are the compiler reference manuals. This tutorial uses mainly GNU programs. Unlike much Open Source documentation, GNU manuals tend to exist and be comprehensive, and that is true for the NASM compiler we use here, (and it’s modern variant, the YASM compiler). Often the manuals contain valuable code insights. They cover subjects like macros and their special addressing modes. But both manuals are written in a sketchy way, and are mostly targeted at existing assembly language programmers. They are poor for referencing, and of little help in learning to code. The YASM manual is slightly different and extended, and worth keeping open.</p><p>As for the official Intel manual on the x86, it is an invaluable source of information. If you want the lowdown on how floating point numbers are represented, or the exact action of ‘ENTER’, and you can stand wading through the pages, this is the place.</p><p>That said, the Intel manual is near‐useless for learning how to code. It will not help you with the history of the instructions—why ‘PUSHA’ and ‘POPA’ have no 64‐bit versions. It will not help you with the practice of the instructions, for example, the intentions of the ‘shaal’ instruction. Not only that, but the Intel guide covers the now‐long history of the x86 CPU design, and multiple upgrades to bit‐size. It runs to nearly 4000 pages. I don’t have fast computers and, downloaded or not, they struggle to display the manual. I’d go so far as to say; any coder who tells their audience to read the manual (meaning the Intel x86 manual), without reference or explanation, is lazy and insulting their audience.</p><p>AMD documentation, though I have never seen it mentioned on the web, is divided up amd more manageable. AMD also provide the ‘Optimisation Guide’ with genuinely interesting hints and the low‐down data on latency (a revised word for ‘clock cycles’ which covers the possibility of pipelining and paralleled execution).</p><p>Most of the so‐called tutorials on the web, the only effective ones, are material from University courses. These are, perhaps as expected, well organised, presented and complete. However, the interest seems to be in teaching machine code to help coders become better high‐level programmers. This leads to bias in the material, such as covering far too much on numeric representations (do we care?). And not enough on the practicalities of coding. The course tutorials also, perhaps due to their place in courses, make far too many assumptions about how an assembly language environment works. Perhaps this is because that material has been introduced, or will supplement course presentations. And finally, the tight text and dry presentation characteristic of a University course limits the general audience and usage. However, the <a href="http://www.drpaulcarter.com/pcasm/">course by Paul Carter</a>, who worked for the University of Central Oklahoma University, is the only work I have found which can claim to teach assembly language. It is the only alternative to this tutorial, so credit, and if you don’t like this tutorial, or wish to supplement it, try there.</p><h2>Useful references on assembly language programming</h2><dd><dd>Try x86 online,</dd><dt><a href="https://defuse.ca/online-x86-assembler.htm#disassembly">https://defuse.ca/online-x86-assembler.htm#disassembly</a></dt><dd>NASM docs,</dd><dt><a href="http://www.nasm.us/xdoc/2.12.01/html/nasmdoc0.html">http://www.nasm.us/xdoc/2.12.01/html/nasmdoc0.html</a></dt><dd>YASM docs,</dd><dt><a href="http://www.tortall.net/projects/yasm/manual/html/manual.html">http://www.tortall.net/projects/yasm/manual/html/manual.html</a></dt><dd>GAS vs. NASM syntax (with interesting examples),</dd><dt><a href="http://www.ibm.com/developerworks/linux/library/l-gas-nasm/index.html">http://www.ibm.com/developerworks/linux/library/l-gas-nasm/index.html</a></dt><dd>‘The Art of Assembly Language’, a book available online or in print, which backs a university course. Sounds promising, but uses it’s own language ‘HLA’, which makes it largely useless. Helpful detail on memory organisation,</dd><dt><a href="http://www.plantation-productions.com/Webster/www.artofasm.com/index.html">http://www.plantation-productions.com/Webster/www.artofasm.com/index.html</a></dt><dd>Real examples! Win, but real!</dd><dt><a href="http://asmsource.8k.com/source32.htm">http://asmsource.8k.com/source32.htm</a></dt><dd>More examples</dd><dt><a href="http://www.csee.umbc.edu/portal/help/nasm/sample_64.shtml">http://www.csee.umbc.edu/portal/help/nasm/sample_64.shtml</a></dt><dd>Eccentrically detailed, Win32 only, good tutorial,</dd><dt><a href="http://www.drpaulcarter.com/pcasm/">http://www.drpaulcarter.com/pcasm/</a></dt><dd>Proper tutorial with an entertaining intro, but not enough,</dd><dt><a href="http://www.singlix.com/trdos/runix/runix386v1_docs/nasm.pdf">http://www.singlix.com/trdos/runix/runix386v1_docs/nasm.pdf</a></dt><dd>Official GNU info on how and where to use machine code,</dd><dt><a href="http://www.tldp.org/HOWTO/html_single/Assembly-HOWTO/#AEN133">http://www.tldp.org/HOWTO/html_single/Assembly-HOWTO/#AEN133</a></dt><dd>Interesting point on assembly code and macros,</dd><dt><a href="http://www.drdobbs.com/parallel/assembly-language-macros/184408512">http://www.drdobbs.com/parallel/assembly-language-macros/184408512</a></dt><dd>Guide to x86 register usage,</dd><dt><a href="http://www.swansontec.com/sregisters.html">http://www.swansontec.com/sregisters.html</a></dt><dd>C API conventions, official, on Github,</dd><dt><a href="https://github.com/hjl-tools/x86-psABI/wiki/X86-psABI">https://github.com/hjl-tools/x86-psABI/wiki/X86-psABI</a></dt><dd>Newish (2013) assembly language IDE. QT desktop,</dd><dt><a href="http://dman95.github.io/SASM/english.html">http://dman95.github.io/SASM/english.html</a></dt><dd>(MASM but…) Interesting tips, good examples, must‐read, maybe re‐visit tips webpage,</dd><dt><a href="http://mark.masmcode.com/">http://mark.masmcode.com/</a></dt><dd>Assembly vs. C examples,</dd><dt><a href="http://www.azillionmonkeys.com/qed/asmexample.html">http://www.azillionmonkeys.com/qed/asmexample.html</a></dt><dd>(Windows) Use system calls to allocate on a heap,</dd><dt><a href="http://www.kipirvine.com/asm/articles/heap_allocation.pdf">http://www.kipirvine.com/asm/articles/heap_allocation.pdf</a></dt><dd>(Linux) Allocate on a heap,</dd><dt><a href="http://x86asm.net/articles/memory-allocation-in-linux/">http://x86asm.net/articles/memory-allocation-in-linux/</a></dt><dd>Post about parallel micro evaluation, with the pretext of ‘how to zero a register’,</dd><dt><a href="https://randomascii.wordpress.com/2012/12/29/the-surprising-subtleties-of-zeroing-a-register/">https://randomascii.wordpress.com/2012/12/29/the-surprising-subtleties-of-zeroing-a-register/</a></dt></dd></article></body></html>