<!DOCTYPE html><html><head><title>X1_calling_conventions</title><meta http-equiv="content-type" content="text/html; charset=UTF-8" /><link rel="stylesheet" type="text/css" media="screen" href="../lib/doc.css"/></head><body><article><h1>Interfacing to C programs</h1><h2>16‐bit conventions</h2><p>Output formats require an underscore on visible symbols.</p><p>The memory model needs to be known. See NASM documentation.</p><h3>Called by C</h3><p>If parameters are to be used, preserve non‐volatile registers,</p><p>push bp</p><p>mov bp sp</p><p>…</p><p>mov sp bp</p><p>pop bp</p><p>ret</p><p>For near functions, parameters start at <ebp+4]>For far functions, paramters start at <ebp+6],>and <ebp+4]>is the segment address. (parameters are word size, 16‐bit, size 2. <ebp+2]>is the return address, pushed by ‘call’). Since first (left) parameter was pushed last, this is the first to appear.</ebp+2]></ebp+4]></ebp+6],></ebp+4]></p><h3>Calling C</h3><p>extern _func</p><p>push word <lastParam]></lastParam]></p><p>…</p><p>push word <firstParam]></firstParam]></p><p>call _func</p><p>large model (note the segment push),</p><p>push word <lastParam]></lastParam]></p><p>…</p><p>push word seg firstParam</p><p>push word <firstParam]></firstParam]></p><p>call _func</p><p><a href="http://www.nasm.us/xdoc/2.12.01/html/nasmdoc8.html#section-8.4">see NASM documentation 16-bit interfacing</a></p><h2>32‐bit conventions</h2><p>Most outputs aside from ELF require an underscore on visible symbols.</p><p>Function parameters go on the stack, right‐left reverse order (first argument is pushed last).</p><h3>Called by C</h3><p>If parameters are to be used, preserve non‐volatile registers,</p><p>push ebp</p><p>mov ebp esp</p><p>…</p><p>mov esp ebp</p><p>pop ebp</p><p>ret</p><p>Parameters start at <ebp+8]>(pareameters are double word size, 32‐bit, size 4. <ebp+4]>is the return address, pushed by ‘call’). Since first (left) parameter was pushed last, this is the first to appear.</ebp+4]></ebp+8]></p><p>If a library is produced, it must define a Global Access Table (‘GOT’). See NASM documentation.</p><h3>Calling C</h3><p>; do not use underscore for ELF</p><p>extern _func</p><p>push dword <lastParam]></lastParam]></p><p>…</p><p>push dword <firstParam]></firstParam]></p><p>call _func</p><p><a href="http://www.nasm.us/xdoc/2.12.01/html/nasmdoc9.html#section-9.1">see NASM documentation 32-bit interfacing</a></p><h2>64‐bit conventions</h2><p>64‐bit conventions use registers to carry the first few parameters.</p><p>Even if unused, do not rely on parameter registers to carry data across a function call.</p><p>Most outputs aside from ELF require an underscore on visible symbols.</p><h2>C calls (MS)</h2><p>Integer parameters go in registers RCX, RDX, R8 and R9. Futher parameters go on the stack right‐left reverse order (first argument is pushed last).</p><p>Floating point parameters are passed in XMM0 to XMM3.</p><p>When integer and float parameters are mixed, both sets of inputs are stepped, used or not e.g. float xmmo, float xmm1, int r8, float xmm3</p><h3>Calling C</h3><p>If parameters are to be used, preserve non‐volatile registers,</p><h4>System V (Solaris/Linux etc.)</h4><p>If used, they should be be restored.</p><h3>Calling C</h3><p>; do not use underscore for ELF</p><p>extern _func</p><p>push dword <lastParam]></lastParam]></p><p>…</p><p>push dword <firstParam]></firstParam]></p><p>call _func</p><h3>Called by C</h3><p>These registers are non‐volatile. If used, they need restoring,</p><ul><li>RBX, RBP, R12–R15</li></ul><p>MMX (XMM(x) registers) can be preserved using ‘emms’ or ‘femms’ instructions.</p><h3>Calling C</h3><p>Most outputs aside from ELF require an underscore on visible symbols.</p><p>Integer parameters go in registers</p><ul><li>RDI, RSI, RDX, RCX, R8 and R9</li></ul><p>Further parameters go on the stack right‐left reverse order (first argument is pushed last).</p><p>Floating point parameters are passed in XMM0 to XMM7.</p><p>When integer and float parameters are mixed, both sets of inputs are stepped, used or not e.g. float xmmo, float xmm1, int r8, float xmm3.</p><p>Returns are in a variety of places, depening on size of the data. For an integer, they will be in RAX.</p><h2>Macros</h2><p>SystemV</p><section class="cb"><p>%define CParam1 rdi</p><p>%define CParam2 rsi</p><p>%define CParam3 rdx</p><p>%define CParam4 rcx</p><p>%define CParam5 r8</p><p>%define CParam6 r9</p></section></article></body></html>