= Complex addresses
== offset coding (address modes) 
You may have noted from macro code, or finding code on the web, that you can code like this,

?cb
mov [rax+16], rbx
?
,
On first-time meeting, you may assume assume this is something the assembler is doing for us. After all, the assembler makes life a little easier for us by turning adresses into human-readable labels, yes? So you may assume this is the assembler allowing a little bit of arithmetic to cover some operations. Maybe the code above translates into this?

?cb
add rax, 16
move [rax], rbx
?

Maybe. 

Use the opcode ''lea' so we don't stomp on memory anywhere, just look to see if this is legitimate syntax,
?cb
    lea rax, 16+2
?
Umm. ""error: invalid combination of opcode and operands".

But
?cb
    lea rax, [16+2]
?
works. So the first idea to take away is that the assembler will do aritmetic but only within a dereferencing position. 

If it's arithmetic, this will work,
?cb
    lea rax, (rdi << 16)
?
''error: shift operator may only be applied to scalar values'. Meaning literals.

?cb
    lea rax, [8<<2]
?
Works. Well, it's unlikely shift is somehow built into the lea opcode, so the assembler must be calculating this code for us. Lets try something gross and unlikely,

?cb
    mov rdi, 1
    lea rax, [rdi*2+rdi*16+2]
? 
Ah. ''error: invalid effective address'.  but if we evaluate that to ''19', 

?cb
    mov rdi, 1
    lea rax, [19]
? 
then it works.  

So what is going on?


== Address modes
The issue is that we have a mix of actions. The assembler is prepared to evaluate a few of our conveniences. It will evaluate a couple of literal numbers with logic. So will many general computer languages.

However, it is also doing something else. It is reflecting that there are CPU (or perhaps ''machine code') instructions that behave like this. The CPU codes can accept several extra parameters on the op-codes. One of those parameters allows offset positions in memory, constructed like this (much simplified),

??
op  destination source offset
--- ----------- ------ ------
mov rax,        rbx,   16                                                          
?

This could be proved by an angled approach, as we did above, asking the assembler to construct something odd, like a multi-abstracted offset. You'll find this fails. Which proves this is not infinately extensible syntax which, in a tool as sensible as NASM, suggests the expression is reflecting some other structure than simple arithmetic. Thatr structure is opcode structure.

Another way to do this is look at the output numbers. If it can be requested, by asking the assembler to output details on the opcodes created. Or you could disassemble the output. From the code,

?cb
    lea rax, [rdi*2+16+2]
?

Here's how ''objectdump -Mintel -d'' reports NASM assembly of the effective address,

??
	48 8d 44 3f 12    lea    rax,[rdi+rdi*1+0x12]
?

Bear in mind ''objdump' is a general tool, not part of NASM. So it reports what it finds. It finds a long opcode, 5bytes (they can be up to 7bytes). It works out what the code means---it means ''LEA with a complex address'. One instruction. 

The name of this feature is an ''address mode', and the idea consumes quite a lot of of assembly language discussion. Moreover, it is an idea more or less specific to the level of assembly code. In nearly any language higher than assembly, ''address modes' are abstracted away. 


== What use are address modes?
The ability to add an offset parameter has a few uses. The story is, At some stages in CPU development they were necessary to access the full range of memory, as one 16bit register can not cover all the memory that could be added to a 16bit machine. So a mode that could add a register or offest to register opcodes was useful.

Even without that primary reason, the offset parameters of opcodes are useful. They let you poke about on the stack without a heap of pushes and pops. They also allow opcode to naturally mimic an array, and other basic structures like a tuple or a C struct. One register holds the base address of the container, while the offset allows to poke into the container. Thus, in higher level languages, offset opcodes can represent ''arrays'.

There is even a sneaky assembly-code trick. An opcode with an offset parameter is really a way of doing simple arithmetic between a register or two, and maybe a literal (an offset). Using offset parameters this arithmetic and allocation is done in one instruction, so with no extra cycles. So if an assembly language coder sees they need a simple arithmetic operation on a value in a register, they may use an offset parameter. This saves clock cycles. Language compilers can often recognise the opportunity and optomise using this trick. So you will see this kind of coding regularly. 

== In the manual
Offset programming can become complex. I talked above about how offset syntax would not extend infinately, yet for several reasons offset modes have been extended considerably. On x64 architecture, for several opcodes, is possible to specify a relative address using two registers and an offset. So valid assembly language can look like this,

?cb
move rax, [rsi*rbx+17]
?

== In use
Some things to know about address modes.
~~ They are not very necessary in x64
:: x64 can cover it's potential memory space now and forever using 64bit registers.
~~ They are still useful to mimic array indexing and the like
:: ....and they consume less clock cycles and registers than separate unstructions

To code with offsets, you need to know, roughly,
~~ They often only work in a 32bit (or thereabouts) mode
:: ...or, in the case of AMD x64, 48bits. So beware of doing tricks with them, or assuming they can transfer full-width data.
~~ If you use offsets, you will always be accessing the data
:: ok, there are some caveats. The data you are accessing may itself  be an address. But to get an address using offsets, you need the opcode '''lea'.
~~ You can't use two offsets at once
:: ''move [rax+16], [rbx+32]' will fail

Overall, address modes is an intricate subject to which an opcode manual will devote several pages. But on x64 the above thoughts will put you on your way. After that, you can as far as you need to go.
 
~~ Too-intricate but suggestive, Wikipedia article,
:: [a(https://en.wikipedia.org/wiki/Addressing_mode)]


== The pesky asterisk
What does [rsi*rdi] mean? In NASM, it means, multiply register contents of ''rsi' by contents of ''rdi'. You can also do for example ''[rsi*2]'.

The reason why multiplication is enabled in effective addresses is largely because of array type structures (which, remember. would include the CPU stack and memory addressing). Most CPU instructions work in terms of bytes. So how to get to index 9 of an 64bit array?

?cb
 [rax+9*8]
?

Note I said in NASM. Reason being, I think the syntax of some other assembly language uses the asterisk as a ''dereference' operator, like in C. NASM always uses square brackets, thank goodness.


== The pesky colon
Won't be long (try NASM documentation) before you come across assembly code notation like this,

?cb
  mov ax,[es:di] 
?
Well, what does that mean?

As mentioned above, at times in computing, the amount of memory available has outstripped the size of register needed to point to that memory. So a set of instruction modifications appeared to join two registers together. With two registers of bits, the range of possible addresss expanded enough to call all the memoery.

Bear in mind this is not simply calling an offset in one register based on the value in another register, This notation treats the two registers as one number, with high bytes in one and low bytes in another.

x64 expanded the register size, and currently registers can hold addreses for more parts of memory. So this notation has less interest to x64 assembly coders. It is mentioned here because you will see it in manuals and code.
  
:: everything you wanted to know about ''segment' addressing,
~~ [a(https://thestarman.pcministry.com/asm/debug/Segments.html)]
