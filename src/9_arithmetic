= 9 Arithmetic
Until now, if you are a beginner, I've hauled you through some work which you may need to take at a pace---particularly macros. But now we have a test rig which can show us results, we can get down to opcodes.

Replace ''main' in the rig with this. It loads a number to ''rax' then subtracts a constant from it,

?codeblock
main:
    push rbp

    mov rax, 7
    add rax, 4
    printlnInt rax

    pop rbp
    mov rax,0
    ret
?

Prints ''11'? Good.

''add' works with negative constants too. Try with,

?codeblock
    add rax, m:-4
?

...and it will go minus,

?codeblock
main:
    push rbp

    mov rax, 7
    add rax, m:-21
    printlnInt rax

    pop rbp
    mov rax,0
    ret
?

This also works with ''sub' (subtract) also. And with double negatives e.g. 

?codeblock
    mov rax, m:-7
    sub rax, m:-21
?

Should print ''14'.


The tricky stuff starts with,

?codeblock
SECTION .data
    ...
    multiplier: dq 7


SECTION .text
    ...
    mov rax, 7
    mul qword [multiplier]
    printlnInt rax
?

Why all the extra code (you ask)? Well, ''mul' will not accept a constant (sadly), only an address or register. Second, ''dq' (''declaration of quad size numeric') is not strictly necessary, but the multiplier should be ''dq' or it will be limited by the given size (for db, to 255). Finally, the compiler can not work out from the address what size the operation must be. For 64bit, it's ''qword' (''quadword')

It's a lot to remember.

Also, ''mul' is supposed to be an unsigned operation. However, it works with m:-. Intel documentation,

#bq
===== 4.2.1 Integers
...
Some integer instructions (such as the ADD, SUB, PADDB, and PSUBB instructions) operate on either unsigned or signed integer operands
#
 


Ok, division. Now, to judege from the shreds of online discussion, division is the biggest problem newcomers meet on x86 processors. What happens is the number to be divided is split across the DX:AX registers. This is divided by whatever is given to ''div'. The result goes in AX, the remainder in DX. 

What beats folks is that since the DX register is used too, it must be cleared, even for small numbers.

So it's supposed to go like this,

?cb
SECTION .data
    ...
    divisor: dq 8


SECTION .text
    ...
    mov rdx, 0
    mov rax, 12
    div qword [divisor]
    printlnInt rdx
    printlnInt rax

?

Easy to get ""Floating point exception". 

Note carefully that the remainder is printed before the result. Otherwise the remainder is wrong, and clearly carrying garbage. More ''printf' interference???

Note also that in 64bit mode, ''div' handles sgns as well as ''idiv'???

Finally. ''div' is very slow, can chew 20 clock cycles, so do not assume this machine code is naturally fast. Optimising-crazy coders use tricks to avoid it. One solution is to approximate using bit-shifts (often works fine for graphics). When I say bit-shifts, I mean a shift right will divide by 2, and if you just need a graphic to move approximately or relatively, a division by 2.4,5 may be fine. Of course, we are a tutorial, so would never encourage optimisation-based programming, which is for experts only. AMD Documentation, 32 bit instructions,

#bq
??
Instruction    Latency
DIV            40
IDIV           43
ADD            4
SUB            4
IMUL           8
IMUL (signed)  18
SHR            4
SHL            4
?
#

There are more accurate approximations too. GCC, for example, doesn't use ''div'---it has it's own little custom sub-function.

Well, that's the end of basic arithmetic. It goes from the simple building brick of ''add' to the bad all-ways code of ''div'. In three letters. What next?





