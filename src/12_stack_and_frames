= 12 Stack frames

Back in [a{5_external_calls_and_printing} chapter 5 External Calls and Printing], without explaining fully, we dived into using the stack.

Let's establish the basics. 

++
@ The stack moves downwards
@ The stack pointer (register SP, EXP, RSP) holds the address of the last pushed item.
@ The base pointer (register BP, EBP, RBP), if it has been set, usually points to the last item (lowest address) pushed in a previous stack frame
+

The naming about stacks is difficult. Many illustations I have seen stress the negative numbers. Personally, when visualising, I prefer to invert the numbering system. That way ''up' is still the free space, and all the diagrams heere will be drawn like that.

== The stack, simple right?
A ''stack' is a first on, first off collection. The usual commands are ''push' and ''pop'. Keep pushing objects on and a stack will grow upwards. The names are illustrative. And the big, one-and-only, assembly language works like that too. So,

?cb
printReg(''rsp')
push 79
push 87
pop rax
printReg(''rax')
printReg(''rsp')
pop rax
printReg(''rax')
printReg(''rsp')
?

Will print ''87' then ''79'. And the stack pointer ''rsp' will decrement on a ''push', and increment on a ''pop'. All is as expected.


== The stack, not simple
A stack is not seen often in high-level code, but is a key programming construct. With a stack, most things that need to be done on a computer can be done. Though that would make life awkward.

The assembly language stack is not treated as high level code. Often it is not treated as a stack at all. It is, after all, a tower of memory with a pointer. Often, it is treated as an array, and the ''rsp' pointer treated as the start of an offset (if you've ever used some low stack implementations, you may have encountered ''peek' commands and the like). You will need to get used to code like this,

?cb
printReg(''rsp')
push 79
push 87
mov rax, [rsp+8*1]
printReg(''rax')
printReg(''rsp')
mov rax, [rsp+8*2]
printReg(''rax')
printReg(''rsp')
?

Does the same as the last code, but instead of popping the values, temporarily sends an offset down the stack to read the values. When dealing with a small block of values, this can prevent a lot of popping and pushing.

== stack ranges are frames
The CPU stack contains much data, of different types and purpose. Much of it is small blocks of data, which would in a higher level language be parameters and local variables. There exists a convention to make sense and trace these blocks. When code moves to use the stack for a different purpose, it can subdivide the stack into areas, or ranges. Each area is called a ''frame'.  

The way this works is to use a second pointer, the base pointer, ''rbp'. This keeps track of the ''low' end of the range (the highest numeric).

So let's say we want to define a new frame. We do this,

?cb
push rbp
mov  rbp, rsp
?

That is, shove the base pointer onto the stack, so it can be later retrieved. Then set the base pointer to ''rsp', i.e. the last known pushed item, the empty ''top' of the stack.

*(stack_when_framed.png) 

??
rsp -> [?]
       [?]
       [?]
rbp -> [?]
? 

Goes to,

??
rsp/
rbp -> [?]      
       [original rbp]
       [?]
       [?]
       [?]
       [?]
? 
goes to,



Then when the code leaves, we can do the reverse,

?cb
push rbp
mov  rbp, rsp

...

mov rsp, rbp
pop rbp
?

Now the stack pointer is dragged down to the original base, and a pop will retore the original base.

??
rsp/
rbp -> [?]      
       [original rbp]
       [?]
       [?]
       [?]
       [?]
? 

Goes to,

??
rsp -> [?]
       [?]
       [?]
rbp -> [?]
? 

The cute thing about this code is that it naturally erases any previous frame data, wether it was popped or not, by making it into free space. It also allows all sorts of debugging by tracing the frames about---which is called ''call stack debugging', and ''stack unwinding'. 

What I don't like about the description, and maybe you are suspicious too, is that this section is too simply written. Notes are missing.


== Allocating space in a frame


== Parameters

= CPU instruction support 
Added in the 186 (so near-universal),

+dd.htz
~ ENTER
 : Modifies stack for entry to procedure for high level language. Takes two operands: the amount of storage to be allocated on the stack, and the nesting level of the procedure.
~ LEAVE
 : Releases the local stack storage created by the previous ENTER instruction.
+

Reputedly, these are not used very often. The story is that they can be slower than the single instructions. For sure, it is often not necessary to do all the instructions these commands do. And cutting down on excess code is one reson for working in assembly code.


== calls
When the instruction ''call' is issued, the return address is pushed to the stack. For nested calls, return adresses are repeatedly pushed (adding calls is sometimes called ''winding', removing them called ''unwinding').






== No need for frames?
That said, assembly language made no demand on you to form stack frames for sub-program calls. If you want, use static variables and registers. Use of frames only makes a program more robust, easier to talk about, and debug. Some very agressive compiler optimisations drop the frames and use relative addressing for everything.


== Call stack
High-level language literature often refers to the call stack. This means the list of sub-programs called, how they are ordered, and how they return.

In assembly language, the main stack is a call stack---it contains call data. But it also contains much more (parameters, local variables, advanced arithmetic results...) that is directly acessible and has probably been manipulated. In assembly language, these details are not abstracted away.

It is probably best not to refer to the CPU stack in assembly language as a ''call stack'. It is the CPU stack, which contains call data.

== 64-bit processing and external calls
When using 64-bit external calls, several registers are used to pass the initial parameters.

In 32-bit assembly programs I have found, registers are used in a general way, like global variables. Maybe the code brackets in a ''pusha'/''popa' combination here and there, but the use of registers remains fairly fluid and through-going.

But in 64-bit code, as soon as an external call is made, this becomes difficult. The call will potentially use useful general registers like ''rcx'. Using the extended registers as a shadow is not possible either, as ''r8' and ''r9' may need to be considered too.

There is no negociating this. Parameter passing by register is often convenient, and sometimes fast. The payoff is that registers containing significant material will need to be backed into the stack. Significant data which needs to persist across external calls must probably start on the stack.

Which is a sort of warning, I suppose. Several utility programs, especially those that print out, will took very different in 32-bit and 64bit versions. Sure, the offset addressing of 32-bit versions will be dropped for 64-bit, but the 64-bit versions will gain a fair few more ''push'/''pop's.  

== The stack
The PUSH, POP, PUSHA (push all registers), and POPA (pop all registers)


== Macros
Since coders con't go for it, and frames are a concept that go beyond sub-program calls,

?cb
; Make a new stack frame.
;
; @param space to be allocated
%macro  frame 1
    push ebp     
    mov ebp, esp 
    sub esp, %1
%endmacro


; Make a new stack frame.
;
; No space is allocated
%macro  frame 0
    push ebp     
    mov ebp, esp 
%endmacro

%macro  frameIdx 1
    push ebp     
    mov ebp, esp 
    sub esp, %1
%endmacro

%macro  unFrame 0
    mov esp, ebp
    pop ebp
%endmacro
?

+dd
~ Brief overview with valuable Linux info,  
: [a{https://eli.thegreenplace.net/2011/09/06/stack-frame-layout-on-x86-64}]
+

