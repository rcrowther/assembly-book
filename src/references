First, in 64-bit especially, we need to talk addresses (pointers).

== Addresses and constants
NASM documentation makes a play that NASM handling of addresses is a simple system compared to TASM and MASM. YASM documentation (based in NASM with often useful additions) talks about ''Effective addresses'. Personally, I find the descriptions, while historically vital, confused. Are they talking about addresses (references), or getting contents (de-referencing)? The descriptions further seem contradictory---is an ''memory address' getting an address or contents?
 
Far as I can tell the situation is this:

The NASM (and YASM) syntax for symbols always produces symbols. That means a compiler construct which allows us to refer to something. The something can be an address or a constant (from the compiler documentation, this was not the case in MASM and TASM. Symbols in some constructions referred to actual references, etc.).

The ''d(x)' class of instructions allocate a piece of memory. Writable or not, the result is an address and a piece of memory (contents).

?codeblock
limit: dq 32
?

NASM has a separate statement for a piece of memory without an address,

?codeblock
limitConst equ 32
?

(of course, this is data at an address. However, the address is obscured, usable only through the symbol, which returns the data)

Similar to C array notation, a symbol with no brackets means an address, a symbol with square brackets means an access. 

Thus,

?cb
limit           ; gets the address of limit ()
[limit]         ; gets the contents of the 'limit' address
limitConst      : gets the limitConst
[limitConst]    ; treats limitConst as an address, returning ''Segmentation fault'
?

also,

?cb
rax           ; gets the address of rax (valid, but rarely intended)
[rax]         ; gets the contents of register 'rax'
?

However, this analogy only goes so far. Really, the square brackets mean ""Treat eveything inside the brackets as a reference". So,

?cb
rax           ; gets the contents of rax (valid, but rarely intended)
[rax]         ; gets the contents of the address in register 'rax'
?

== Relative addressing
Unwriten in documentation

Addresses are measured in bytes. Larger size numerics are held in a consecutive set of bytes. A quadword (64-bit) is madde of eight bytes. reading them from left to right, as a human would on paper, looks in memory like this,

byte1
byte2
byte3
byte4
byte5
byte6
byte7
byte8

Intel documentation.

#bq
The low byte (bits 0 through 7) of each data type occupies the lowest address in memory and that address is also the address of the operand.
#

Where the adress is is not so important. What you need to know is that the next quadword after a quadword at address ''addr' is at ''addr+8'.

Because adding these multiples is tedious and error-prone, the multiplication is often written  out expicitly. Sor the fifth wadqord up form address ''addr' is ''addr+5*8'. Written like this, the next quadword would be ''addr+1*8' (the same as ''addr+8').



== The LEA instruction
This instruction returns the effective address of the second operand,

??
    lea rax [rsp+8]
?

puts the address ''rsp+8' in ''rax'. Otherwise,

??
    mov rax [rsp+8]
?

Would put the contents at ''rsp+8' in ''rax'. Withoiut ''lea' you woulkd write,

?cb
    mov rax rsp
    add rax, 8
?

=== Little note on LEA

LEA can do arithmetic on it's parameters. This is fast with compact notation. So you may find code like,

?cb
main:
    enter 0,0
    pushNonVolatile

    mov rbx, 77
    lea rax, [5*rbx+7]
    println64 rax


    popNonVolatile
    mov rax,0
    leave
    ret
?

Which loads ''eax' with ''392', from ''5*77+7'. But the result must be a legal address, which can limit the trick.

