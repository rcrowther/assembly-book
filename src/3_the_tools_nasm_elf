

= 3 The tools, NASM and ELF

== What you need
Linux. Nearly any Linux will do.

If you have an rpm or Debian package system, easy. Install,

++
@ 'gcc'
@ 'nasm'
+

and pick a text editor. Gedit or Kate will work fine (yes they will)... or EMACS, vi, nano, Gleany etc. But don't use a word processor, it will be slow and may cause trouble with encodings.

If you were wondering about the usual problem of packages being out-of-date, don't. Assembly language has been around since the 1960's---these programs, for the behaviour we need, are stable. And, though they may depend on other packages, the programs are self-contained---one is not going to mess with another. 

All in all, this is maybe the easiest start in a programming language you will ever have.

While we are waiting, let's look at why we want them.


== Linux
For various reasons, Linux is easier for assembly language. I run out of reasons---the distributions are readily available, it can can be easily installed on computers (even an old computer), it's easy to see and navigate files, programs are readily available in repositories, it has a superior commandline for running the programs, it has more logical handling of the CPU... I give up. I'll likely think of more later.

We use Linux.


 
== NASM, the compiler
Many assemblers have been built. On the web,

+dd
~ TASM 
: Turbo Assembler from the company Borland
~ MASM 
: Microsoft assembler
~ YASM
: Pluggable Open-Source assembler. Modular update of NASM, handles both AT&T and Intel syntax.
~ GAS
: Original Linux assembler, used to backend GCC, the Open-Source compiler behind Linux. Originally used AT&T syntax.
~ NASM 
: Open Source compiler with BSD License. Uses Intel syntax.
+

For the compiler, we'll use NASM. NASM uses Intel syntax. Intel syntax is much easier than the old Open Source GAS syntax. NASM is also freely available in Linux package repositories. It well documented and less confusing than the admittedly impressive YASM.



== ELF, the output file format
Many forms of output files exist. We will use ELF ''object files'. 

ELF stands for Executable and Linkable Object Format. It's the main compiled file format for many operating systems including FreeBSD or GNU/Linux. 

Linkable means lots of little files can be made with unresolved symbols in them. You state a method, but there is no code available. But the making of an ELF does not complain. Then, with all the files gathered together, a linking program joins the symbols together and generates working code. 

The two steps of compile/link are a serious usability issue in the work chain of making code. Most higher-level languages avoid them. But the two-step process has advantages, and they are big advantages. First, when making changes to code, unchanged files do not need to be recompiled---using the linker, they can be glued in for the new code. This is much faster. Second, files with accessible symbols can dropped into a system, for other code to use---they become a library.

In a Linux/Unix system, ELF files appear in three forms,

++
@ Shared object files (conventionally named .so)
@ Relocatable object files (conventionally named .o)
@ Executable files (no convention, often the name of the program)
+

=== ELF in general
ELF files have a header and segments.

Segments are the elements ELF files use when they run, or are run. Segments may hold text, data, stacks etc. Segments contains one or more sections. For the resons and names, see the section below.

Assemblers like NASM can handle segments. This means they can, for example, generate output files handling a mix of 16-bit and 32-bit code.  In this tutorial we do not discuss segments (this is not about output formats). However, you may find the words popping up. Since the reference documentation is not clear about this, it's good to know the difference.
 
ELF holds data and functional code, both referenced by symbols. ELF software keeps track of how big symbols are, whether they are weak, are they data or functions... that kind of information. 

=== ELF segments and sections
The ELF standard is clear, but in practice, this is confusing nomenclature.

Segments are big groups of data used for running programs. In most of our code, there is usually only one big executable part, and a handful of support segments. They are referred to by a program header table. The headers describe where execution should start.

Sections are smaller groups of data, within segments. These are used to tell linkers and libraries where to jump in. They are refered to in a section header table, which describes their position size, type etc.


=== ELF segments
Each segment has a seperate use. Each segment has a distinct combination of flags (and these flags can be changed). To talk about the flag sets is too deep for us---see YASM documentation for a quick introduction.

Here and there, we will use segments. The standard ELF segments are,

+dl
~ .bss
: Global/local static variables (uninitialized), read/write
~ .data
: Global/local static variables, read/write
~ .rodata
: Global/local static constants, read
~ .text
: Code, read (on many architectures, no write)/execute
~ .comment
: As it says...
+

Many more segments are available in the ELF standard, for example .ldata, for 64bit data, and .got, for the symbol table (which is internal). We will not consider them, because we use tools that generate those segments automatically. You only need to know the segments above. Don't fret... when we come to use this information, I'll repeat it.


=== Looking at ELF files
ELF can be read using a Linux utility called ''readelf'. This is often available pre-installed on systems like Ubuntu. To display all info (very large output!),

?cb
> readelf -a <file>
?

To display symbols only,

?cb
> readelf -s <file>
?

The output is informative. Some may say, scary. Let's stick with informative. 

++
~ Wikipedia on ELF format,
: [a{https://en.wikipedia.org/wiki/Executable_and_Linkable_Format}]
~ ELF AMD54 standard,
: [a{http://refspecs.linuxbase.org/elf/x86_64-abi-0.99.pdf}]
~ 44 pages on shared libraries, covers a lot of ground about linkage, relocation etc.
: [a{https://akkadia.org/drepper/dsohowto.pdff}]
+

== GCC, the linker
We need GCC (the Open Source C and other low-level language compiler) for linking.

When we produce an ELF file, it likely will not run on it's own. Yes, machine code files can be made which do everything themselves. After all, other computer languages ultimately spew out machine code, so anything they can do, machine code can do. Some machine coders are hired because they can do everything without any help, and that can make files small, small, small. 

However, writing stand-alone machine code is costly. And these posts are a tutorial. I don't think it's much of a tutorial hauling you through fifty, one hundred, lines of code so we can print out results. We need some help---we need someone else's code welded to ours.

Which means, once we have written code, using a linker to join our code to other code. Well, GCC has that code built-in. So we don't have to fight with all the usual horrible compiler lines. Two wins, useful code, and easy compilation (the only loss is that GCC is a horrible lump to download).

== Where we at?
Ready to go.
