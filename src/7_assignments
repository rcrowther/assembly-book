= 7 Assignments

Now we have a basic rig, we start on arithmetic... Well, that's what most assembly tutorials seem to do. But we are not everybody else, so we start on how to create basic data---variables and constants,

== db---space allocation
Remember this, from the rig (that I said you can take on trust?),

?codeblock
SECTION .data
    printTest: db 'Aye', 0h
    printlnFmt: db "%s", 10, 0
?

Ignore the fact they are strings, Lets go for basics.

''db' introduces data. If that is what it does, it is introducing data into the section of an ELF file which we have said contains ''initiated data'

There are several instructions in the ''db' family. The instructions stand for,

#bq
    ''data'<a one letter code for the size>
#

So,

+dd
~ db 
: data byte (8-bit)
~ dw
: data word (16-bit)
~ dd
: data double (32-bit)
~ dq
: data quad (64-bit)
~ dt
~ ddq
: data double quad (128-bit)
~ do
: alias for double-quad (128-bit)
+

=== Sizing
So what are these funny size marks?

Once upon a time there was a ''byte'. Computers used it. Then the byte had to get longer. Meanwhile, there was a ''word', which was the ''natural' bus size of a computer. But then Microsoft decided this was getting silly and confusing, so they set ''word' to 16-bits. Microsoft were not alone, dealing with strings, C decided smallest addressable size (usually 8-bit) would be a ''char', and threw in ''t_size'. Java made a effort to straighten this out, finalizing a system which is not compatible with anyone else.

In NASM,

+dd
~ BYTE
: 8-bit
~ WORD
: (following Microsoft fix) 16-bit
~ DWORD
: double natural size, 32-bit
~ QWORD
: quad natural size, 64-bit
+

and C types?

+dd
~ char
: (%c) smallest size, usually 8-bit
~ int
: (%i or %d) at least 16-bit
~ long 
: (%li) at least 32-bit
~ long long
: (%lli) quad natural size, 64-bit
~ float
: (%f) Not core spec, usually 32 bits
~ double
: (%f yes, same as float) Not core spec, usually 64 bits
+

What a mess.

Ok so we carefully match types, then try this code. It will fail,

?cb
SECTION .data
    ...
    a: db 97
    b: dd 56789
    c: dq 56789
    d: dd 5.6789
    e: dq 2.5

main:
    ...
    printChar 'a'
    printIs
    printlnChar a
    printChar 'b'
    printIs
    println32 b
    printChar 'c'
    printIs
    println64 c
    printChar 'd'
    printIs
    printlnFloat d
    printChar 'e'
    printIs
    printlnFloat e
    ...
?

The floats cause this,

?cb.result
 error: invalid combination of opcode and operands
?

Comment or cut them (''d' and  ''e'). Try again,

The ''printf'-based instructions are robust, and will print out. However, we have a problem, because the numbers print out wrong---not what was defined. Your results may even vary, but for sure they are garbage. I get this,

?cb.result
a: @
b: 6295617
c: 6295621
?

If you are in 32-bit, the result may look better, but... 

This is going wrong, and can go wrong, in several places. If you write as above, you are assuming there is some idea of type being passed about. That the original definition is typed, the load into the register is typed, and that the ''printf' knows what it is doing. 

But in assembly language, type only exist to define an immediate size. For example, we defined variable ''d' as a 32-bit. With assembly-language precision it may have been stored as 32-bit. Then the value was loaded into a register---in our example, a 64-bit register. So either the top end of the register was unused (thus carrying garbage), or an oversize lump was carved from memory to fill it (with extra garbage). We are using macros, so at least we know the register is being loaded for the ''printf' call---but what if we had been using a function call? Then the value would have travelled to the stack, maybe with it's own conventions for data size. And then the register value was passed in the C call---unknown C code where we hope the compiler and printing code understands our intentions. Quite a few places to go wrong.

Let's fix it. 

== Fix the assignments
First, we have no chance with floats. For now, remove/comment them both. 

Now, in 64-bit, all storage sizes should be 64-bit, ''dq'.

Then, first way, access/de-reference the reference values,

?cb
SECTION .data
    ...
    a: dq 97
    b: dq 56789
    c: dq 56789
    d: dq 5.6789
    e: dq 2.5
 
main:
    ...
    printChar 'a'
    printIs
    printlnChar [a]
    printChar 'b'
    printIs
    println64 [b]
    printChar 'c'
    printIs
    println32 [c]
    printChar 'd'
    printIs
    printlnFloat [d]
    printChar 'e'
    printIs
    printlnFloat [e]
    ...
?

or, second way, use ''equ' and let the compiler work magic,

?cb
SECTION .data
    ...
    a: equ 97
    b: equ 56789
    c: equ 56789
 
main:
    ...
    printlnChar 'a'
    printlnChar a
    printlnChar 'b'
    println64 b
    printlnChar 'c'
    ...
?

Either way, that's better,

?cb.result
a
a
b
56789
c
56789
?

Try a complete 32 bit pipeline, and you will get this error,

?cb.result
hw.asm:xxx: error: mismatch in operand sizes
?

The ''printf' call baulks. See down a bit.

== Sections
Remember this, from post 2?

#dd
~ SECTION .text
: contains the instructions that is executed. The only section that can be
executed. Treated as read-only data once the program is run.

~ SECTION .data
: contains initialised data. It cannot be executed,  but may be read from
and written to when the program is run. Contains ''dx' type pseudo-instructions.

~ SECTION .bss
: contains uninitialised data.  It cannot be executed, but may be read from
and written to when the program is run.  Contains ''resx' pseudo-instructions.

~ SECTION .rodata
: contains initialised read-only data. It may not be written to. Contains ''dx' type pseudo-instructions.
#

If we are stupid, here is what happens,

?cb
BITS 64
SECTION .rodata
    roa: dq 97
    rob: equ 97
    ; "warning: uninitialized space declared in non-BSS section `.rodata': zeroing"
    ;roc: resq 1

SECTION .data
    ia: dq 97
    ib: equ 97
    ; "warning: uninitialized space declared in non-BSS section `.data': zeroing"
    ; ic: resq 1

SECTION .bss
    ; "warning: attempt to initialize memory in BSS section `.bss': ignored"
    ; da: dq 97
    db: equ 97
    dc: resq 1

SECTION .text
global main
main:
    push rbp

    println64 [ia]
    println64 ib
    println64 [roa]
    println64 rob
    println64 db
    ; prints uninitialized crap
    println64 dc

    ; this works...
    mov rax, [qword ia] 
    mov [dc], rax 
    print64 [dc]

    ; attempt to assign to otherwise similar read-only var
    ; returns "Segmentation fault"
    mov rax, [qword ia] 
    ; mov [roa], rax
    ; print64 [roa]

    pop rbp
    mov rax,0
    ret
?

Uninitialised space in sections where data must be initialized is initialized to zero. The attempt to create initialized memory in ''.bss' is ignored.

There is a purpose for the read-only initialized data---it can carry any large structure which is read-only (as address/pointer). Though, in the loose world of assembly language, this is unusually fine coding.



== Macros

This notation for bit-size drives me fly-crazy,

?cb
; Size-labeled data definitions
%define const equ
%define ref8 db
%define ref16 dw
%define ref32 dd
%define ref64 dq
%define ref128 ddq
? 

//////////////////

When size not defined well,
?cb
hw.asm:283: error: operation size not specified
?

